// This file is in AsciiDoc format. It is converted to README.html.

Compilation instructions
------------------------


Required tools
~~~~~~~~~~~~~~

For all builds you will need:

C/C++ compiler and Make utility::
On Windows download http://www.mingw.org/[MinGW].
Using the Automated MinGW Installer select just the C and C++ compilers.

Perl::
On Windows install either http://cygwin.com/[Cygwin]'s Perl,
http://strawberryperl.com/[Strawberry Perl] or
http://www.activestate.com/activeperl/[ActivePerl].

xasm and MADS::
If you are compiling latest source code from Git, install
http://xasm.atari.org/[xasm] and http://mads.atari8.info/[MADS].

Make sure these tools are on your `PATH`.


Getting officially released source code
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

If you want to compile an official release of ASAP, download source distribution
(`asap-*.tar.gz`) and uncompress it to a directory of your choice.

On Unix-like systems:
--------------------------------------------------------------------------------
tar zxf asap-*.tar.gz
--------------------------------------------------------------------------------

On Windows you may use http://7-zip.org/[7-Zip].


Getting latest source code
~~~~~~~~~~~~~~~~~~~~~~~~~~

Alternatively you may get the latest version from the Git repository.
To do this using a command-line Git client:
--------------------------------------------------------------------------------
git clone git://asap.git.sourceforge.net/gitroot/asap/asap
--------------------------------------------------------------------------------

This will fetch the latest code to a new directory called `asap`.


Building asapconv and libasap on Unix-like systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From your shell prompt navigate to the directory which contains `asap.c`.

To compile and install, run the following commands:
--------------------------------------------------------------------------------
make
make install
--------------------------------------------------------------------------------

The second command must be run with super-user priviledges.
It installs the command-line converter and the C library under the directory
specified as `PREFIX` in the `Makefile`
(`/usr/local`, feel free to edit `Makefile`).


Using asapconv
~~~~~~~~~~~~~~

Run the program from command line to see the syntax.
The `-o`/`--output` option selects the output format and is mandatory.


Using libasap
~~~~~~~~~~~~~

The library is documented in the `asap.h` header file.
Be warned there might be breaking changes in the future versions of the library.


Building the XMMS plugin on Unix-like systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need full XMMS installation.
If you have just the XMMS binary package installed, you additionally need
`xmms-devel`. I have tested only the 1.2.10 version of XMMS.
XMMS itself depends on Gtk+ and Glib, so you need them too.

To compile, run the following command:
--------------------------------------------------------------------------------
make asap-xmms
--------------------------------------------------------------------------------

If the compilation finished successfully, you can install the plugin
in your home directory:
--------------------------------------------------------------------------------
make install-xmms-user
--------------------------------------------------------------------------------

or, if you are root, for all users:
--------------------------------------------------------------------------------
make install-xmms
--------------------------------------------------------------------------------

If you have another XMMS plugin that supports 8-bit Atari music,
remove it in order to avoid conflicts.


Building the MOC plugin on Unix-like systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need source code of MOC. The plugin is compatible with MOC 2.4.x
and MOC 2.5.0 alpha.

Edit `Makefile`. Pay attention to `MOC_INCLUDE` and `MOC_PLUGIN_DIR`.

Then use the following commands:
--------------------------------------------------------------------------------
make asap-moc
make install-moc
--------------------------------------------------------------------------------


Building the XBMC plugin on Linux
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need source code of the Linux port of XBMC. Make sure it includes
support for ASAP.

Edit `Makefile`.
`XBMC_DLL_LOADER_EXPORTS` must point to the directory in XBMC sources
which contains `wrapper.def` and `wrapper.o`.

Then run:
--------------------------------------------------------------------------------
make asap-xbmc
--------------------------------------------------------------------------------

You will get `xbmc_asap-i486-linux.so`.


Building the Audacious plugin on Unix-like systems
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Install `audacious-devel`.
To compile, run the following command:
--------------------------------------------------------------------------------
make audacious
--------------------------------------------------------------------------------

To install in `/usr/lib/audacious/Input`:
--------------------------------------------------------------------------------
make install-audacious
--------------------------------------------------------------------------------


Building asapconv, WASAP, Winamp/GSPlayer/Apollo/XMPlay/BASS plugins, RMT DLL, asapscan, shell extension and libasap on Windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

From the command prompt navigate to the `win32` directory and run:
--------------------------------------------------------------------------------
mingw32-make mingw
--------------------------------------------------------------------------------

You should get `asapconv.exe`, `wasap.exe`, `in_asap.dll`, `gspasap.dll`,
`ASAP_Apollo.dll`, `xmp-asap.dll`, `bass_asap.dll`, `apokeysnd.dll`,
`asapscan.exe`, `ASAPShellEx.dll` and `libasap.a`.


Building Windows Media Player plugin and asap.lib on Windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You additionally need Windows SDK
(install native C++ compiler, headers, libraries and samples).
Set `Path`, `INCLUDE` and `LIB` environment variables
to point to the right locations in the Windows SDK.
Make sure `DSHOW_BASECLASSES_DIR` is set correctly in `win32\Makefile`.

From the command prompt navigate to the `win32` directory and run:
--------------------------------------------------------------------------------
mingw32-make dsf asap.lib
--------------------------------------------------------------------------------

You will get `asap_dsf.dll` and `asap.lib`.


Building the foobar2000 plugin on Windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In addition to the common prerequisites and Windows SDK you need
foobar2000 SDK - extract it to a new directory called
`foobar2000_SDK` next to (not inside!) the ASAP directory.

From the command prompt navigate to the `win32` directory and run:
--------------------------------------------------------------------------------
mingw32-make foo
--------------------------------------------------------------------------------

This should produce `foo_asap.dll`.


Building WASAP, GSPlayer and Windows Media Player plugins for Windows CE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For WASAP and GSPlayer plugins you need http://cegcc.sourceforge.net/[CeGCC].
For the Windows Media Player plugin you need Visual Studio 2008
(2005 might work, but wasn't checked, 2010 won't work).

Edit the paths at the top of `win32/Makefile` so they point to your installed tools.
From the command prompt navigate to the `win32` directory and run:
--------------------------------------------------------------------------------
mingw32-make wince
--------------------------------------------------------------------------------

This should produce `wasap.exe`, `gspasap.dll` and `asap_dsf.dll`
in the `win32/wince` directory.


Building Java ASAP2WAV and applet
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need Java Development Kit (JDK).

Edit the paths at the top of `java/Makefile` so they point to your installed tools.
From the command prompt navigate to the `java` directory and run:
--------------------------------------------------------------------------------
make
--------------------------------------------------------------------------------

This should produce `asap2wav.jar` and `asap_applet.jar`.


Building Java midlet
~~~~~~~~~~~~~~~~~~~~

You need Perl and a Java ME SDK - I use Sun Java ME platform SDK.

Edit the paths at the top of `java/j2me/Makefile` so they point to your installed tools.
From the command prompt navigate to the `java/j2me` directory and run:
--------------------------------------------------------------------------------
make
--------------------------------------------------------------------------------

This should produce `asap_midlet.jar` and `asap_midlet.jad`.

Building AndroidASAP
~~~~~~~~~~~~~~~~~~~~

Install http://developer.android.com/sdk/[Android SDK]
with an Android platform(s) (I compile with 2.2 and test with 1.6).

Edit the paths at the top of `java/android/Makefile`
so they point to your installed SDK.
From the command prompt navigate to the `java/android` directory and run:
--------------------------------------------------------------------------------
make
--------------------------------------------------------------------------------

This should produce `android/AndroidASAP-debug.apk`.
AndroidASAP integrates with file managers and the web browser.
It uses the internet connection only for files clicked in the web browser.


Building C# ASAP2WAV, asapplay and SilverASAP on Windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need .NET Framework, of course.

From the command prompt navigate to the `csharp` directory and run:
--------------------------------------------------------------------------------
mingw32-make
--------------------------------------------------------------------------------

This should produce `asap2wav.exe`, `asapplay.exe` and `SilverASAP.xap`.


Building the XBMC plugin on Windows
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need Visual C\++ Toolkit (it used to be a free download from Microsoft,
now search the internet for `VCToolkitSetup.exe`) or Microsoft Visual C++ 2003.

Navigate to the `win32` directory and run:
--------------------------------------------------------------------------------
mingw32-make xbmc
--------------------------------------------------------------------------------

This should produce `xbmc_asap.dll`, which you can use with XBox
or Windows version of XBMC. The XBMC must include support for ASAP.


Building JavaScript ASAP2WAVs (command-line and for web browsers)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Navigate to the `javascript` directory and run:
--------------------------------------------------------------------------------
make
--------------------------------------------------------------------------------
(or `mingw32-make`).

The results are `asap2wav.js` and `asapweb.js`.


Building Flash player version of ASAP
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You need http://opensource.adobe.com/wiki/display/flexsdk/Flex+SDK[Flex SDK].
Add its `bin` directory to your `PATH`.

Navigate to the `flash` directory and run:
--------------------------------------------------------------------------------
make
--------------------------------------------------------------------------------
(or `mingw32-make`).

You should get `asap.swf`.
