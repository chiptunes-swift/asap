// pokey.ci - POKEY chip emulator
//
// Copyright (C) 2010-2014  Piotr Fusik
//
// This file is part of ASAP (Another Slight Atari Player),
// see http://asap.sourceforge.net
//
// ASAP is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published
// by the Free Software Foundation; either version 2 of the License,
// or (at your option) any later version.
//
// ASAP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with ASAP; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

/// Format of output samples.
public enum ASAPSampleFormat
{
	/// Unsigned 8-bit.
	U8,
	/// Signed 16-bit little-endian.
	S16LE,
	/// Signed 16-bit big-endian.
	S16BE
}

class PokeyChannel
{
	int Audf;
	int Audc;
	int PeriodCycles;
	int TickCycle;
	int TimerCycle;

	// Is channel muted?
	const int MuteFrequency = 1;
	const int MuteInit = 2;
	const int MuteUser = 4;
	const int MuteSerialInput = 8;
	int Mute;

	int Out;
	int Delta;

	void Initialize()
	{
		Audf = 0;
		Audc = 0;
		PeriodCycles = 28;
		TickCycle = Pokey.NeverCycle;
		TimerCycle = Pokey.NeverCycle;
		Mute = MuteFrequency;
		Out = 0;
		Delta = 0;
	}

	void Slope(Pokey pokey, PokeyPair pokeys, int cycle)
	{
		Delta = -Delta;
		pokey.AddDelta(pokeys, cycle, Delta);
	}

	void DoTick(Pokey pokey, PokeyPair pokeys, int cycle, int ch)
	{
		TickCycle += PeriodCycles;
		int audc = Audc;
		if ((audc & 0xb0) == 0xa0)
			Out ^= 1;
		else if ((audc & 0x10) != 0 || pokey.Init)
			return;
		else {
			int poly = cycle + pokey.PolyIndex - ch;
			if (audc < 0x80 && (0x65bd44e0 & 1 << (poly % 31)) == 0) // 0000011100100010101111011010011
				return;
			if ((audc & 0x20) != 0)
				Out ^= 1;
			else {
				int newOut;
				if ((audc & 0x40) != 0)
					newOut = 0x5370 >> (poly % 15); // 000011101100101
				else if (pokey.Audctl < 0x80) {
					poly %= 131071;
					newOut = pokeys.Poly17Lookup[poly >> 3] >> (poly & 7);
				}
				else
					newOut = pokeys.Poly9Lookup[poly % 511];
				newOut &= 1;
				if (Out == newOut)
					return;
				Out = newOut;
			}
		}
		Slope(pokey, pokeys, cycle);
	}

	void DoStimer(int cycle)
	{
		if (TickCycle != Pokey.NeverCycle)
			TickCycle = cycle + PeriodCycles;
	}

	void SetMute(bool enable, int mask, int cycle)
	{
		if (enable) {
			Mute |= mask;
			TickCycle = Pokey.NeverCycle;
		}
		else {
			Mute &= ~mask;
			if (Mute == 0 && TickCycle == Pokey.NeverCycle)
				TickCycle = cycle;
		}
	}

	void MuteUltrasound(int cycle)
	{
		const int UltrasoundCycles = 112;
		SetMute(PeriodCycles <= UltrasoundCycles && (Audc & 0xb0) == 0xa0, MuteFrequency, cycle);
	}

	void SetAudc(Pokey pokey, PokeyPair pokeys, int data, int cycle)
	{
		if (Audc == data)
			return;
		pokey.GenerateUntilCycle(pokeys, cycle);
		Audc = data;
		const int DeltaShiftPOKEY = 20;
		if ((data & 0x10) != 0) {
			data = (data & 0xf) << DeltaShiftPOKEY;
			if ((Mute & MuteUser) == 0)
				pokey.AddDelta(pokeys, cycle, Delta > 0 ? data - Delta : data);
			Delta = data;
		}
		else {
			data = (data & 0xf) << DeltaShiftPOKEY;
			MuteUltrasound(cycle);
			if (Delta > 0) {
				if ((Mute & MuteUser) == 0)
					pokey.AddDelta(pokeys, cycle, data - Delta);
				Delta = data;
			}
			else
				Delta = -data;
		}
	}

	void EndFrame(int cycle)
	{
		if (TimerCycle != Pokey.NeverCycle)
			TimerCycle -= cycle;
	}
}

class Pokey
{
	PokeyChannel()[4] Channels;
	int Audctl;
	int Skctl;
	int Irqst;
	bool Init;
	int DivCycles;
	int ReloadCycles1;
	int ReloadCycles3;
	int PolyIndex;
	const int NeverCycle = 0x800000;

	// Sample rates from 32000 to 50000 should be fine,
	// but weren't tested - please report your experience.
	// For lower rates, you'll need to add a low-pass filter.
	// The DC filter in PokeyPair.Generate should also be adjusted
	// whenever the sample rate considerably differs from 44100.
	const int SampleRate = 44100;
	// Enough for one PAL frame == 312 * 114 cycles + some margin,
	// as we emulate whole 6502 instructions and interpolate samples.
	int[SampleRate * 312 * 114 / 1773447 + 4] DeltaBuffer;

	void Initialize()
	{
		for (int i = 0; i < 4; i++)
			Channels[i].Initialize();
		Audctl = 0;
		Skctl = 3;
		Irqst = 0xff;
		Init = false;
		DivCycles = 28;
		ReloadCycles1 = 28;
		ReloadCycles3 = 28;
		PolyIndex = 15 * 31 * 131071;
		DeltaBuffer.Clear();
	}

	void AddDelta(PokeyPair pokeys, int cycle, int delta)
	{
		int i = cycle * pokeys.SampleFactor + pokeys.SampleOffset;
		// too large value reduces the resolution of delta (if bigger than DeltaShiftCOVOX, DeltaShiftPOKEY)
		// too small value reduces the resolution of interpolation
		const int interpolationShift = 16;
		int delta2 = (delta >> interpolationShift) * (i >> (PokeyPair.SampleFactorShift - interpolationShift) & ((1 << interpolationShift) - 1));
		i >>= PokeyPair.SampleFactorShift;
		DeltaBuffer[i] += delta - delta2;
		DeltaBuffer[i + 1] += delta2;
	}

	/// Fills `DeltaBuffer` up to `cycleLimit` basing on current Audf/Audc/Audctl values.
	void GenerateUntilCycle(PokeyPair pokeys, int cycleLimit)
	{
		for (;;) {
			int cycle = cycleLimit;
			for (int i = 0; i < 4; i++) {
				int tickCycle = Channels[i].TickCycle;
				if (cycle > tickCycle)
					cycle = tickCycle;
			}
			if (cycle == cycleLimit)
				break;

			if (cycle == Channels[2].TickCycle) {
				if ((Audctl & 4) != 0 && Channels[0].Delta > 0 && Channels[0].Mute == 0)
					Channels[0].Slope(this, pokeys, cycle);
				Channels[2].DoTick(this, pokeys, cycle, 2);
			}
			if (cycle == Channels[3].TickCycle) {
				if ((Audctl & 8) != 0)
					Channels[2].TickCycle = cycle + ReloadCycles3;
				if ((Audctl & 2) != 0 && Channels[1].Delta > 0 && Channels[1].Mute == 0)
					Channels[1].Slope(this, pokeys, cycle);
				Channels[3].DoTick(this, pokeys, cycle, 3);
			}
			if (cycle == Channels[0].TickCycle) {
				if ((Skctl & 0x88) == 8) // two-tone, sending 1 (i.e. timer1)
					Channels[1].TickCycle = cycle + Channels[1].PeriodCycles;
				Channels[0].DoTick(this, pokeys, cycle, 0);
			}
			if (cycle == Channels[1].TickCycle) {
				if ((Audctl & 0x10) != 0)
					Channels[0].TickCycle = cycle + ReloadCycles1;
				else if ((Skctl & 8) != 0) // two-tone
					Channels[0].TickCycle = cycle + Channels[0].PeriodCycles;
				Channels[1].DoTick(this, pokeys, cycle, 1);
			}
		}
	}

	void EndFrame(PokeyPair pokeys, int cycle)
	{
		GenerateUntilCycle(pokeys, cycle);
		PolyIndex += cycle;
		int m = (Audctl & 0x80) != 0 ? 15 * 31 * 511 : 15 * 31 * 131071;
		if (PolyIndex >= 2 * m)
			PolyIndex -= m;
		for (int i = 0; i < 4; i++) {
			int tickCycle = Channels[i].TickCycle;
			if (tickCycle != NeverCycle)
				Channels[i].TickCycle = tickCycle - cycle;
		}
	}

	bool IsSilent()
	{
		for (int i = 0; i < 4; i++)
			if ((Channels[i].Audc & 0xf) != 0)
				return false;
		return true;
	}

	void Mute(int mask)
	{
		for (int i = 0; i < 4; i++)
			Channels[i].SetMute((mask & (1 << i)) != 0, PokeyChannel.MuteUser, 0);
	}

	void InitMute(int cycle)
	{
		bool init = Init;
		int audctl = Audctl;
		Channels[0].SetMute(init && (audctl & 0x40) == 0, PokeyChannel.MuteInit, cycle);
		Channels[1].SetMute(init && (audctl & 0x50) != 0x50, PokeyChannel.MuteInit, cycle);
		Channels[2].SetMute(init && (audctl & 0x20) == 0, PokeyChannel.MuteInit, cycle);
		Channels[3].SetMute(init && (audctl & 0x28) != 0x28, PokeyChannel.MuteInit, cycle);
	}

	int Poke(PokeyPair pokeys, int addr, int data, int cycle)
	{
		macro DO_STORE(reg) {
			if (data == reg)
				break;
			GenerateUntilCycle(pokeys, cycle);
			reg = data;
		}

		int nextEventCycle = NeverCycle;
		switch (addr & 0xf) {
		case 0x00:
			DO_STORE(Channels[0].Audf);
			switch (Audctl & 0x50) {
			case 0x00:
				Channels[0].PeriodCycles = DivCycles * (data + 1);
				break;
			case 0x10:
				Channels[1].PeriodCycles = DivCycles * (data + (Channels[1].Audf << 8) + 1);
				ReloadCycles1 = DivCycles * (data + 1);
				Channels[1].MuteUltrasound(cycle);
				break;
			case 0x40:
				Channels[0].PeriodCycles = data + 4;
				break;
			case 0x50:
				Channels[1].PeriodCycles = data + (Channels[1].Audf << 8) + 7;
				ReloadCycles1 = data + 4;
				Channels[1].MuteUltrasound(cycle);
				break;
			}
			Channels[0].MuteUltrasound(cycle);
			break;
		case 0x01:
			Channels[0].SetAudc(this, pokeys, data, cycle);
			break;
		case 0x02:
			DO_STORE(Channels[1].Audf);
			switch (Audctl & 0x50) {
			case 0x00:
			case 0x40:
				Channels[1].PeriodCycles = DivCycles * (data + 1);
				break;
			case 0x10:
				Channels[1].PeriodCycles = DivCycles * (Channels[0].Audf + (data << 8) + 1);
				break;
			case 0x50:
				Channels[1].PeriodCycles = Channels[0].Audf + (data << 8) + 7;
				break;
			}
			Channels[1].MuteUltrasound(cycle);
			break;
		case 0x03:
			Channels[1].SetAudc(this, pokeys, data, cycle);
			break;
		case 0x04:
			DO_STORE(Channels[2].Audf);
			switch (Audctl & 0x28) {
			case 0x00:
				Channels[2].PeriodCycles = DivCycles * (data + 1);
				break;
			case 0x08:
				Channels[3].PeriodCycles = DivCycles * (data + (Channels[3].Audf << 8) + 1);
				ReloadCycles3 = DivCycles * (data + 1);
				Channels[3].MuteUltrasound(cycle);
				break;
			case 0x20:
				Channels[2].PeriodCycles = data + 4;
				break;
			case 0x28:
				Channels[3].PeriodCycles = data + (Channels[3].Audf << 8) + 7;
				ReloadCycles3 = data + 4;
				Channels[3].MuteUltrasound(cycle);
				break;
			}
			Channels[2].MuteUltrasound(cycle);
			break;
		case 0x05:
			Channels[2].SetAudc(this, pokeys, data, cycle);
			break;
		case 0x06:
			DO_STORE(Channels[3].Audf);
			switch (Audctl & 0x28) {
			case 0x00:
			case 0x20:
				Channels[3].PeriodCycles = DivCycles * (data + 1);
				break;
			case 0x08:
				Channels[3].PeriodCycles = DivCycles * (Channels[2].Audf + (data << 8) + 1);
				break;
			case 0x28:
				Channels[3].PeriodCycles = Channels[2].Audf + (data << 8) + 7;
				break;
			}
			Channels[3].MuteUltrasound(cycle);
			break;
		case 0x07:
			Channels[3].SetAudc(this, pokeys, data, cycle);
			break;
		case 0x08:
			DO_STORE(Audctl);
			DivCycles = (data & 1) != 0 ? 114 : 28;
			// TODO: TickCycles
			switch (data & 0x50) {
			case 0x00:
				Channels[0].PeriodCycles = DivCycles * (Channels[0].Audf + 1);
				Channels[1].PeriodCycles = DivCycles * (Channels[1].Audf + 1);
				break;
			case 0x10:
				Channels[0].PeriodCycles = DivCycles << 8;
				Channels[1].PeriodCycles = DivCycles * (Channels[0].Audf + (Channels[1].Audf << 8) + 1);
				ReloadCycles1 = DivCycles * (Channels[0].Audf + 1);
				break;
			case 0x40:
				Channels[0].PeriodCycles = Channels[0].Audf + 4;
				Channels[1].PeriodCycles = DivCycles * (Channels[1].Audf + 1);
				break;
			case 0x50:
				Channels[0].PeriodCycles = 256;
				Channels[1].PeriodCycles = Channels[0].Audf + (Channels[1].Audf << 8) + 7;
				ReloadCycles1 = Channels[0].Audf + 4;
				break;
			}
			Channels[0].MuteUltrasound(cycle);
			Channels[1].MuteUltrasound(cycle);
			switch (data & 0x28) {
			case 0x00:
				Channels[2].PeriodCycles = DivCycles * (Channels[2].Audf + 1);
				Channels[3].PeriodCycles = DivCycles * (Channels[3].Audf + 1);
				break;
			case 0x08:
				Channels[2].PeriodCycles = DivCycles << 8;
				Channels[3].PeriodCycles = DivCycles * (Channels[2].Audf + (Channels[3].Audf << 8) + 1);
				ReloadCycles3 = DivCycles * (Channels[2].Audf + 1);
				break;
			case 0x20:
				Channels[2].PeriodCycles = Channels[2].Audf + 4;
				Channels[3].PeriodCycles = DivCycles * (Channels[3].Audf + 1);
				break;
			case 0x28:
				Channels[2].PeriodCycles = 256;
				Channels[3].PeriodCycles = Channels[2].Audf + (Channels[3].Audf << 8) + 7;
				ReloadCycles3 = Channels[2].Audf + 4;
				break;
			}
			Channels[2].MuteUltrasound(cycle);
			Channels[3].MuteUltrasound(cycle);
			InitMute(cycle);
			break;
		case 0x09:
			// TODO: ReloadCycles, Out
			for (int i = 0; i < 4; i++)
				Channels[i].DoStimer(cycle);
			break;
		case 0x0e:
			Irqst |= data ^ 0xff;
			for (int i = 3; ; i >>= 1) {
				if ((data & Irqst & i + 1) != 0) {
					if (Channels[i].TimerCycle == NeverCycle) {
						int t = Channels[i].TickCycle;
						while (t < cycle)
							t += Channels[i].PeriodCycles;
						Channels[i].TimerCycle = t;
						if (nextEventCycle > t)
							nextEventCycle = t;
					}
				}
				else
					Channels[i].TimerCycle = NeverCycle;
				if (i == 0)
					break;
			}
			break;
		case 0x0f:
			DO_STORE(Skctl);
			bool init = (data & 3) == 0;
			if (Init && !init)
				PolyIndex = ((Audctl & 0x80) != 0 ? 15 * 31 * 511 - 1 : 15 * 31 * 131071 - 1) - cycle;
			Init = init;
			InitMute(cycle);
			Channels[2].SetMute((data & 0x10) != 0, PokeyChannel.MuteSerialInput, cycle);
			Channels[3].SetMute((data & 0x10) != 0, PokeyChannel.MuteSerialInput, cycle);
			break;
		default:
			break;
		}
		return nextEventCycle;
	}

	int CheckIrq(int cycle, int nextEventCycle)
	{
		for (int i = 3; ; i >>= 1) {
			int timerCycle = Channels[i].TimerCycle;
			if (cycle >= timerCycle) {
				Irqst &= ~(i + 1);
				Channels[i].TimerCycle = NeverCycle;
			}
			else if (nextEventCycle > timerCycle)
				nextEventCycle = timerCycle;
			if (i == 0)
				break;
		}
		return nextEventCycle;
	}
}

#if APOKEYSND
public
#endif
class PokeyPair
{
	byte[511] Poly9Lookup;
	byte[16385] Poly17Lookup;
	int ExtraPokeyMask;
	Pokey() BasePokey;
	Pokey() ExtraPokey;

	// DeltaBuffer.Length << SampleFactorShift shouldn't overflow int.
	// SampleFactorShift could be 21, but that wouldn't improve
	// accuracy because SampleFactor would be even.
	const int SampleFactorShift = 20;
	int SampleFactor;
	int SampleOffset;

	int ReadySamplesStart;
	int ReadySamplesEnd;

	int IirAccLeft;
	int IirAccRight;

#if APOKEYSND
	public
#endif
	PokeyPair()
	{
		int reg = 0x1ff;
		for (int i = 0; i < 511; i++) {
			reg = (((reg >> 5 ^ reg) & 1) << 8) + (reg >> 1);
			Poly9Lookup[i] = reg.LowByte;
		}
		reg = 0x1ffff;
		for (int i = 0; i < 16385; i++) {
			reg = (((reg >> 5 ^ reg) & 0xff) << 9) + (reg >> 8);
			Poly17Lookup[i] = (reg >> 1).LowByte;
		}
	}

	// What we really need here is:
	// return ((Pokey.SampleRate << SampleFactorShift) + (clock >> 1)) / clock;
	// unfortunately cito provides only 32-bit arithmetic for the moment,
	// so I shift by 5 to avoid overflow.
	static int GetSampleFactor(int clock)
		return ((Pokey.SampleRate << SampleFactorShift - 5) + (clock >> 6)) / (clock >> 5);

#if APOKEYSND
	public
#endif
	void Initialize(bool ntsc, bool stereo)
	{
		ExtraPokeyMask = stereo ? 0x10 : 0;
		BasePokey.Initialize();
		ExtraPokey.Initialize();
		SampleFactor = ntsc ? GetSampleFactor(1789772) : GetSampleFactor(1773447);
		SampleOffset = 0;
		ReadySamplesStart = 0;
		ReadySamplesEnd = 0;
		IirAccLeft = 0;
		IirAccRight = 0;
	}

#if APOKEYSND
	public
#endif
	int Poke(int addr, int data, int cycle)
	{
		Pokey pokey = (addr & ExtraPokeyMask) != 0 ? ExtraPokey : BasePokey;
		return pokey.Poke(this, addr, data, cycle);
	}

#if APOKEYSND
	public
#endif
	int Peek(int addr, int cycle)
	{
		Pokey pokey = (addr & ExtraPokeyMask) != 0 ? ExtraPokey : BasePokey;
		switch (addr & 0xf) {
		case 0x0a:
			if (pokey.Init)
				return 0xff;
			int i = cycle + pokey.PolyIndex;
			if ((pokey.Audctl & 0x80) != 0)
				return Poly9Lookup[i % 511];
			i %= 131071;
			int j = i >> 3;
			i &= 7;
			return ((Poly17Lookup[j] >> i) + (Poly17Lookup[j + 1] << (8 - i))) & 0xff;
		case 0x0e:
			return pokey.Irqst;
		default:
			return 0xff;
		}
	}

#if APOKEYSND
	public
#endif
	void StartFrame()
	{
		BasePokey.DeltaBuffer.Clear();
		if (ExtraPokeyMask != 0)
			ExtraPokey.DeltaBuffer.Clear();
	}

#if APOKEYSND
	public
#endif
	int EndFrame(int cycle)
	{
		BasePokey.EndFrame(this, cycle);
		if (ExtraPokeyMask != 0)
			ExtraPokey.EndFrame(this, cycle);
		SampleOffset += cycle * SampleFactor;
		ReadySamplesStart = 0;
		ReadySamplesEnd = SampleOffset >> SampleFactorShift;
		SampleOffset &= (1 << SampleFactorShift) - 1;
		return ReadySamplesEnd;
	}

	/// Fills buffer with samples from `DeltaBuffer`.
#if APOKEYSND
	public
#endif
	int Generate(byte[] buffer, int bufferOffset, int blocks, ASAPSampleFormat format)
	{
		int i = ReadySamplesStart;
		int samplesEnd = ReadySamplesEnd;
		if (blocks < samplesEnd - i)
			samplesEnd = i + blocks;
		else
			blocks = samplesEnd - i;
		int accLeft = IirAccLeft;
		int accRight = IirAccRight;
		for (; i < samplesEnd; i++) {
			accLeft += BasePokey.DeltaBuffer[i] - (accLeft * 3 >> 10);
			int sample = accLeft >> 11;
			macro STORE_SAMPLE() {
				if (sample < -32767)
					sample = -32767;
				else if (sample > 32767)
					sample = 32767;
				switch (format) {
				case ASAPSampleFormat.U8:
					buffer[bufferOffset++] = (sample >> 8) + 128;
					break;
				case ASAPSampleFormat.S16LE:
					buffer[bufferOffset++] = sample.LowByte;
					buffer[bufferOffset++] = (sample >> 8).LowByte;
					break;
				case ASAPSampleFormat.S16BE:
					buffer[bufferOffset++] = (sample >> 8).LowByte;
					buffer[bufferOffset++] = sample.LowByte;
					break;
				}
			}
			STORE_SAMPLE();
			if (ExtraPokeyMask != 0) {
				accRight += ExtraPokey.DeltaBuffer[i] - (accRight * 3 >> 10);
				sample = accRight >> 11;
				STORE_SAMPLE();
			}
		}
		if (i == ReadySamplesEnd) {
			accLeft += BasePokey.DeltaBuffer[i] + BasePokey.DeltaBuffer[i + 1];
			accRight += ExtraPokey.DeltaBuffer[i] + ExtraPokey.DeltaBuffer[i + 1];
		}
		ReadySamplesStart = i;
		IirAccLeft = accLeft;
		IirAccRight = accRight;
#if APOKEYSND
		return bufferOffset;
#else
		return blocks;
#endif
	}

	bool IsSilent()
		return BasePokey.IsSilent() && ExtraPokey.IsSilent();
}
