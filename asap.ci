// asap.ci - emulation engine
//
// Copyright (C) 2010-2011  Piotr Fusik
//
// This file is part of ASAP (Another Slight Atari Player),
// see http://asap.sourceforge.net
//
// ASAP is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published
// by the Free Software Foundation; either version 2 of the License,
// or (at your option) any later version.
//
// ASAP is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty
// of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
// See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with ASAP; if not, write to the Free Software Foundation, Inc.,
// 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA

enum NmiStatus
{
	Reset,
	OnVBlank,
	WasVBlank
}

/// 8-bit Atari chip music emulator.
/// This class performs no I/O operations - all music data must be passed in byte arrays.
public class ASAP
{
	/// Output sample rate.
	public const int SampleRate = Pokey.SampleRate;

	int Cycle;
	int NextEventCycle;

	byte[65536] Memory;

	Cpu6502() Cpu;

	// ANTIC:
	int NextScanlineCycle;
	NmiStatus Nmist;

	// GTIA:
	int Consol;

	// COVOX:
	byte[4] Covox;

	// POKEYs:
	PokeyPair() Pokeys;

	ASAPInfo() ModuleInfo;
	int NextPlayerCycle;
	int TmcPerFrameCounter;
	int CurrentSong;
	int CurrentDuration;
	int BlocksPlayed;
	int SilenceCycles;
	int SilenceCyclesCounter;

	public ASAP()
	{
		SilenceCycles = 0;
	}

	/// Enables silence detection.
	/// Causes playback to stop after the specified period of silence.
	public void DetectSilence(
		/// Length of silence which ends playback. Zero disables silence detection.
		int seconds)
	{
		SilenceCyclesCounter = SilenceCycles = seconds * Pokeys.MainClock;
	}

	int PeekHardware(int addr)
	{
		switch (addr & 0xff1f) {
		case 0xd014:
			return ModuleInfo.Ntsc ? 0xf : 1;
		case 0xd01f:
			return ~Consol & 0xf;
		case 0xd20a:
		case 0xd21a:
			return Pokeys.GetRandom(addr, Cycle);
		case 0xd20e:
			return Pokeys.Irqst;
		case 0xd21e:
			if (Pokeys.ExtraPokeyMask != 0) {
				// interrupts in the extra POKEY not emulated at the moment
				return 0xff;
			}
			return Pokeys.Irqst;
		case 0xd20c:
		case 0xd21c:
		case 0xd20f: // just because some SAP files rely on this
		case 0xd21f:
			return 0xff;
		case 0xd40b:
		case 0xd41b:
			if (Cycle > (ModuleInfo.Ntsc ? 262 * 114 : 312 * 114))
				return 0;
			return Cycle / 228;
		case 0xd40f:
			switch (Nmist) {
			case NmiStatus.Reset:
				return 0x1f;
			case NmiStatus.WasVBlank:
				return 0x5f;
			case NmiStatus.OnVBlank:
			default: // shut up compilers
				return Cycle < 28291 ? 0x1f : 0x5f;
			}
		default:
			return Memory[addr];
		}
	}

	void PokeHardware(int addr, int data)
	{
		if (addr >> 8 == 0xd2) {
			if ((addr & (Pokeys.ExtraPokeyMask + 0xf)) == 0xe) {
				Pokeys.Irqst |= data ^ 0xff;
				macro SET_TIMER_IRQ(ch) {
					if ((data & Pokeys.Irqst & ch) != 0) {
						if (Pokeys.Timer##ch##Cycle == Pokey.NeverCycle) {
							int t = Pokeys.BasePokey.TickCycle##ch;
							while (t < Cycle)
								t += Pokeys.BasePokey.PeriodCycles##ch;
							Pokeys.Timer##ch##Cycle = t;
							if (NextEventCycle > t)
								NextEventCycle = t;
						}
					}
					else
						Pokeys.Timer##ch##Cycle = Pokey.NeverCycle;
				}
				SET_TIMER_IRQ(1);
				SET_TIMER_IRQ(2);
				SET_TIMER_IRQ(4);
			}
			else
				Pokeys.Poke(addr, data, Cycle);
		}
		else if ((addr & 0xff0f) == 0xd40a) {
			int x = Cycle % 114;
			Cycle += (x <= 106 ? 106 : 106 + 114) - x;
		}
		else if ((addr & 0xff0f) == 0xd40f) {
			Nmist = Cycle < 28292 ? NmiStatus.OnVBlank : NmiStatus.Reset;
		}
		else if ((addr & 0xff00) == ModuleInfo.CovoxAddr) {
			Pokey pokey;
			addr &= 3;
			if (addr == 0 || addr == 3)
				pokey = Pokeys.BasePokey;
			else
				pokey = Pokeys.ExtraPokey;
			const int DeltaShiftCOVOX = 17;
			pokey.AddDelta(Pokeys, Cycle, (data - Covox[addr]) << DeltaShiftCOVOX);
			Covox[addr] = data;
		}
		else if ((addr & 0xff1f) == 0xd01f) {
			const int DeltaShiftGTIA = 20;
			// NOT data - Consol; reverse to the POKEY sound
			int delta = ((Consol & 8) - (data & 8)) << DeltaShiftGTIA;
			Pokeys.BasePokey.AddDelta(Pokeys, Cycle, delta);
			Pokeys.ExtraPokey.AddDelta(Pokeys, Cycle, delta);
			Consol = data;
		}
		else
			Memory[addr] = data;
	}

	void Call6502(int addr)
	{
		const int codeAddr = 0xd200;
		Memory[codeAddr] = 0x20; // JSR
		Memory[codeAddr + 1] = addr.LowByte;
		Memory[codeAddr + 2] = addr >> 8;
		Memory[codeAddr + 3] = 0xd2; // escape
		Cpu.Pc = codeAddr;
	}

	void Call6502Player()
	{
		int player = ModuleInfo.Player;
		switch (ModuleInfo.Type) {
		case ASAPModuleType.SapB:
			Call6502(player);
			break;
		case ASAPModuleType.SapC:
#if !ASAP_ONLY_SAP
		case ASAPModuleType.Cmc:
		case ASAPModuleType.Cm3:
		case ASAPModuleType.Cmr:
		case ASAPModuleType.Cms:
#endif
			Call6502(player + 6);
			break;
		case ASAPModuleType.SapD:
			if (player >= 0) {
				macro PH(x) { Memory[0x100 + Cpu.S] = x; Cpu.S = (Cpu.S - 1) & 0xff; }
				PH(Cpu.Pc >> 8);
				PH(Cpu.Pc.LowByte);
				const int codeAddr = 0xd200;
				Memory[codeAddr] = 0x08; // PHP
				Memory[codeAddr + 1] = 0x48; // PHA
				Memory[codeAddr + 2] = 0x8a; // TXA
				Memory[codeAddr + 3] = 0x48; // PHA
				Memory[codeAddr + 4] = 0x98; // TYA
				Memory[codeAddr + 5]= 0x48; // PHA
				Memory[codeAddr + 6] = 0x20; // JSR
				Memory[codeAddr + 7] = player.LowByte;
				Memory[codeAddr + 8] = player >> 8;
				Memory[codeAddr + 9] = 0x68; // PLA
				Memory[codeAddr + 10] = 0xa8; // TAY
				Memory[codeAddr + 11] = 0x68; // PLA
				Memory[codeAddr + 12] = 0xaa; // TAX
				Memory[codeAddr + 13] = 0x68; // PLA
				Memory[codeAddr + 14] = 0x40; // RTI
				Cpu.Pc = codeAddr;
			}
			break;
		case ASAPModuleType.SapS:
			int i = Memory[0x45] - 1;
			Memory[0x45] = i.LowByte;
			if (i == 0)
				Memory[0xb07b] = (Memory[0xb07b] + 1).LowByte;
			break;
#if !ASAP_ONLY_SAP
		case ASAPModuleType.Dlt:
			Call6502(player + 0x103);
			break;
		case ASAPModuleType.Mpt:
		case ASAPModuleType.Rmt:
		case ASAPModuleType.Tm2:
			Call6502(player + 3);
			break;
		case ASAPModuleType.Tmc:
			if (--TmcPerFrameCounter <= 0) {
				TmcPerFrameCounter = Memory[ModuleInfo.Music + 0x1f];
				Call6502(player + 3);
			}
			else
				Call6502(player + 6);
			break;
#if EXPERIMENTAL_XEX
		case ASAPModuleType.Xex:
			break;
#endif
#endif
		}
	}

	void HandleEvent()
	{
		int cycle = Cycle;
		if (cycle >= NextScanlineCycle) {
			if (cycle - NextScanlineCycle < 50) // not WSYNC
				Cycle = cycle += 9;
			NextScanlineCycle += 114;
			if (cycle >= NextPlayerCycle) {
				Call6502Player();
				NextPlayerCycle += 114 * ModuleInfo.Fastplay;
			}
		}
		int nextEventCycle = NextScanlineCycle;
		macro CHECK_TIMER_IRQ(ch) {
			if (cycle >= Pokeys.Timer##ch##Cycle) {
				Pokeys.Irqst &= ~ch;
				Pokeys.Timer##ch##Cycle = Pokey.NeverCycle;
			}
			else if (nextEventCycle > Pokeys.Timer##ch##Cycle)
				nextEventCycle = Pokeys.Timer##ch##Cycle;
		}
		CHECK_TIMER_IRQ(1);
		CHECK_TIMER_IRQ(2);
		CHECK_TIMER_IRQ(4);
		NextEventCycle = nextEventCycle;
	}

	int Do6502Frame()
	{
		NextEventCycle = 0;
		NextScanlineCycle = 0;
		Nmist = Nmist == NmiStatus.Reset ? NmiStatus.OnVBlank : NmiStatus.WasVBlank;
		int cycles = ModuleInfo.Ntsc ? 262 * 114 : 312 * 114;
		Cpu.DoFrame(this, cycles);
		Cycle -= cycles;
		if (NextPlayerCycle != Pokey.NeverCycle)
			NextPlayerCycle -= cycles;
		if (Pokeys.Timer1Cycle != Pokey.NeverCycle)
			Pokeys.Timer1Cycle -= cycles;
		if (Pokeys.Timer2Cycle != Pokey.NeverCycle)
			Pokeys.Timer2Cycle -= cycles;
		if (Pokeys.Timer4Cycle != Pokey.NeverCycle)
			Pokeys.Timer4Cycle -= cycles;
		return cycles;
	}

	int DoFrame()
	{
		Pokeys.StartFrame();
		int cycles = Do6502Frame();
		Pokeys.EndFrame(cycles);
		return cycles;
	}

	/// Loads music data ("module").
	public void Load(
		/// Filename, used to determine the format.
		string filename,
		/// Contents of the file.
		byte[] module,
		/// Length of the file.
		int moduleLen)
	{
		ModuleInfo.Load(filename, module, moduleLen);
#if !ASAP_ONLY_SAP
		byte[] playerRoutine = ASAP6502.GetPlayerRoutine(ModuleInfo);
		if (playerRoutine != null) {
			int player = ASAPInfo.GetWord(playerRoutine, 2);
			int playerLastByte = ASAPInfo.GetWord(playerRoutine, 4);
			if (ModuleInfo.Music <= playerLastByte)
				throw "Module address conflicts with the player routine";
			Memory[0x4c00] = 0; // for 11270-byte DLT
			module.CopyTo(6, Memory, ModuleInfo.Music, moduleLen - 6);
			playerRoutine.CopyTo(6, Memory, player, playerLastByte + 1 - player);
			if (ModuleInfo.Player < 0)
				ModuleInfo.Player = player;
			return;
		}
#endif
		Memory.Clear();
		int moduleIndex = ModuleInfo.HeaderLen + 2;
		while (moduleIndex + 5 <= moduleLen) {
			int startAddr = ASAPInfo.GetWord(module, moduleIndex);
			int blockLen = ASAPInfo.GetWord(module, moduleIndex + 2) + 1 - startAddr;
			if (blockLen <= 0 || moduleIndex + blockLen > moduleLen)
				throw "Invalid binary block";
			moduleIndex += 4;
			module.CopyTo(moduleIndex, Memory, startAddr, blockLen);
			moduleIndex += blockLen;
			if (moduleIndex == moduleLen)
				return;
			if (moduleIndex + 7 <= moduleLen && module[moduleIndex] == 0xff && module[moduleIndex + 1] == 0xff)
				moduleIndex += 2;
		}
		throw "Invalid binary block";
	}

	/// Returns information about the loaded module.
	public ASAPInfo GetInfo()
	{
		return ModuleInfo;
	}

	void Do6502Init(int pc, int a, int x, int y)
	{
		Cpu.Pc = pc;
		Cpu.A = a & 0xff;
		Cpu.X = x & 0xff;
		Cpu.Y = y & 0xff;
		const int escapeAddr = 0xd200;
		Memory[escapeAddr] = 0xd2; // escape code
		Memory[0x1fe] = (escapeAddr - 1).LowByte; // return address points to the escape code
		Memory[0x1ff] = (escapeAddr - 1) >> 8;
		Cpu.S = 0xfd;
		for (int frame = 0; frame < 50; frame++) {
			Do6502Frame();
			if (Cpu.Pc == escapeAddr)
				return;
		}
		throw "INIT routine didn't return";
	}

	/// Mutes the selected POKEY channels.
	public void MutePokeyChannels(
		/// An 8-bit mask which selects POKEY channels to be muted.
		int mask)
	{
		Pokeys.BasePokey.Mute(mask);
		Pokeys.ExtraPokey.Mute(mask >> 4);
	}

	/// Prepares playback of the specified song of the loaded module.
	public void PlaySong(
		/// Zero-based song index.
		int song,
		/// Playback time in milliseconds, -1 means infinity.
		int duration)
	{
		if (song < 0 || song >= ModuleInfo.Songs)
			throw "Song number out of range";
		CurrentSong = song;
		CurrentDuration = duration;
		NextPlayerCycle = Pokey.NeverCycle;
		BlocksPlayed = 0;
		SilenceCyclesCounter = SilenceCycles;

		Cycle = 0;
		Cpu.Nz = 0;
		Cpu.C = 0;
		Cpu.Vdi = 0;
		Nmist = NmiStatus.OnVBlank;
		Consol = 8;
		Covox[0] = 0x80;
		Covox[1] = 0x80;
		Covox[2] = 0x80;
		Covox[3] = 0x80;
		Pokeys.Initialize(ModuleInfo.Ntsc ? 1789772 : 1773447, ModuleInfo.Channels > 1);
		MutePokeyChannels(0xff);
		switch (ModuleInfo.Type) {
		case ASAPModuleType.SapB:
			Do6502Init(ModuleInfo.Init, song, 0, 0);
			break;
		case ASAPModuleType.SapC:
#if !ASAP_ONLY_SAP
		case ASAPModuleType.Cmc:
		case ASAPModuleType.Cm3:
		case ASAPModuleType.Cmr:
		case ASAPModuleType.Cms:
#endif
			Do6502Init(ModuleInfo.Player + 3, 0x70, ModuleInfo.Music, ModuleInfo.Music >> 8);
			Do6502Init(ModuleInfo.Player + 3, 0x00, song, 0);
			break;
		case ASAPModuleType.SapD:
		case ASAPModuleType.SapS:
			Cpu.Pc = ModuleInfo.Init;
			Cpu.A = song;
			Cpu.X = 0x00;
			Cpu.Y = 0x00;
			Cpu.S = 0xff;
			break;
#if !ASAP_ONLY_SAP
		case ASAPModuleType.Dlt:
			Do6502Init(ModuleInfo.Player + 0x100, 0x00, 0x00, ModuleInfo.SongPos[song]);
			break;
		case ASAPModuleType.Mpt:
			Do6502Init(ModuleInfo.Player, 0x00, ModuleInfo.Music >> 8, ModuleInfo.Music);
			Do6502Init(ModuleInfo.Player, 0x02, ModuleInfo.SongPos[song], 0);
			break;
		case ASAPModuleType.Rmt:
			Do6502Init(ModuleInfo.Player, ModuleInfo.SongPos[song], ModuleInfo.Music, ModuleInfo.Music >> 8);
			break;
		case ASAPModuleType.Tmc:
		case ASAPModuleType.Tm2:
			Do6502Init(ModuleInfo.Player, 0x70, ModuleInfo.Music >> 8, ModuleInfo.Music);
			Do6502Init(ModuleInfo.Player, 0x00, song, 0);
			TmcPerFrameCounter = 1;
			break;
#if EXPERIMENTAL_XEX
		case ASAPModuleType.Xex:
			Cpu.Pc = ASAPInfo.GetWord(Memory, 0x2e0);
			Cpu.A = song;
			Cpu.X = 0x00;
			Cpu.Y = 0x00;
			Cpu.S = 0xff;
			break;
#endif
#endif
		}
		MutePokeyChannels(0);
		NextPlayerCycle = 0;
	}

	/// Returns current playback position in blocks.
	/// A block is one sample or a pair of samples for stereo.
	public int GetBlocksPlayed()
	{
		return BlocksPlayed;
	}

	/// Returns current playback position in milliseconds.
	public int GetPosition()
	{
		return BlocksPlayed * 10 / (SampleRate / 100);
	}

	static int MillisecondsToBlocks(int milliseconds)
	{
		return milliseconds * (SampleRate / 100) / 10;
	}

	/// Changes the playback position.
	public void Seek(
		/// The requested absolute position in milliseconds.
		int position)
	{
		int block = MillisecondsToBlocks(position);
		if (block < BlocksPlayed)
			PlaySong(CurrentSong, CurrentDuration);
		while (BlocksPlayed + Pokeys.ReadySamplesEnd < block) {
			BlocksPlayed += Pokeys.ReadySamplesEnd;
			DoFrame();
		}
		Pokeys.ReadySamplesStart = block - BlocksPlayed;
		BlocksPlayed = block;
	}

	static void PutLittleEndian(byte[] buffer, int offset, int value)
	{
		buffer[offset] = value.LowByte;
		buffer[offset + 1] = (value >> 8).LowByte;
		buffer[offset + 2] = (value >> 16).LowByte;
		buffer[offset + 3] = (value >> 24).LowByte;
	}

	/// WAV file header length.
	// TODO: <seealso cref="GetWavHeader" />
	public const int WavHeaderLength = 44;

	/// Fills leading bytes of the specified buffer with WAV file header.
	/// The number of changed bytes is `WavHeaderLength`.
	// TODO: <see cref="WavHeaderLength" />
	public void GetWavHeader(
		/// The destination buffer.
		byte[] buffer,
		/// Format of samples.
		ASAPSampleFormat format)
	{
		int use16bit = format != ASAPSampleFormat.U8 ? 1 : 0;
		int blockSize = ModuleInfo.Channels << use16bit;
		int bytesPerSecond = SampleRate * blockSize;
		int totalBlocks = MillisecondsToBlocks(CurrentDuration);
		int nBytes = (totalBlocks - BlocksPlayed) * blockSize;
		buffer[0] = 'R';
		buffer[1] = 'I';
		buffer[2] = 'F';
		buffer[3] = 'F';
		PutLittleEndian(buffer, 4, nBytes + 36);
		buffer[8] = 'W';
		buffer[9] = 'A';
		buffer[10] = 'V';
		buffer[11] = 'E';
		buffer[12] = 'f';
		buffer[13] = 'm';
		buffer[14] = 't';
		buffer[15] = ' ';
		buffer[16] = 16;
		buffer[17] = 0;
		buffer[18] = 0;
		buffer[19] = 0;
		buffer[20] = 1;
		buffer[21] = 0;
		buffer[22] = ModuleInfo.Channels;
		buffer[23] = 0;
		PutLittleEndian(buffer, 24, SampleRate);
		PutLittleEndian(buffer, 28, bytesPerSecond);
		buffer[32] = blockSize;
		buffer[33] = 0;
		buffer[34] = 8 << use16bit;
		buffer[35] = 0;
		buffer[36] = 'd';
		buffer[37] = 'a';
		buffer[38] = 't';
		buffer[39] = 'a';
		PutLittleEndian(buffer, 40, nBytes);
	}

	int GenerateAt(byte[] buffer, int bufferOffset, int bufferLen, ASAPSampleFormat format)
	{
		if (SilenceCycles > 0 && SilenceCyclesCounter <= 0)
			return 0;
		int blockShift =
#if FLASH
			0;
#else
			(ModuleInfo.Channels - 1) + (format != ASAPSampleFormat.U8 ? 1 : 0);
#endif
		int bufferBlocks = bufferLen >> blockShift;
		if (CurrentDuration > 0) {
			int totalBlocks = MillisecondsToBlocks(CurrentDuration);
			if (bufferBlocks > totalBlocks - BlocksPlayed)
				bufferBlocks = totalBlocks - BlocksPlayed;
		}
		int block = 0;
		for (;;) {
			int blocks = Pokeys.Generate(buffer, bufferOffset + (block << blockShift), bufferBlocks - block, format);
			BlocksPlayed += blocks;
			block += blocks;
			if (block >= bufferBlocks)
				break;
			int cycles = DoFrame();
			if (SilenceCycles > 0) {
				if (Pokeys.IsSilent()) {
					SilenceCyclesCounter -= cycles;
					if (SilenceCyclesCounter <= 0)
						break;
				}
				else
					SilenceCyclesCounter = SilenceCycles;
			}
		}
		return block << blockShift;
	}

	/// Fills the specified buffer with generated samples.
	public int Generate(
		/// The destination buffer.
		byte[] buffer,
		/// Number of bytes to fill.
		int bufferLen,
		/// Format of samples.
		ASAPSampleFormat format)
	{
		return GenerateAt(buffer, 0, bufferLen, format);
	}

	/// Returns POKEY channel volume - an integer between 0 and 15.
	public int GetPokeyChannelVolume(
		/// POKEY channel number (from 0 to 7).
		int channel)
	{
		switch (channel) {
		case 0: return Pokeys.BasePokey.Audc1 & 0xf;
		case 1: return Pokeys.BasePokey.Audc2 & 0xf;
		case 2: return Pokeys.BasePokey.Audc3 & 0xf;
		case 3: return Pokeys.BasePokey.Audc4 & 0xf;
		case 4: return Pokeys.ExtraPokey.Audc1 & 0xf;
		case 5: return Pokeys.ExtraPokey.Audc2 & 0xf;
		case 6: return Pokeys.ExtraPokey.Audc3 & 0xf;
		case 7: return Pokeys.ExtraPokey.Audc4 & 0xf;
		default: return 0;
		}
	}
}
